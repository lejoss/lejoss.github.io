{"version":3,"sources":["Post.tsx","useLocalStorage.tsx","Page.tsx","index.tsx","constants.ts"],"names":["Post","post","title","body","username","city","useLocalStorage","key","initialValue","React","useState","item","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setStorage","value","valueToStore","Function","setItem","stringify","initialState","posts","users","fetching","ReactDOM","render","clientId","setClientId","storedData","setDataToStore","isEmpty","data","setState","fetchData","a","axios","get","mapKeys","useEffect","uuidv4","renderPosts","map","p","id","userId","address","data-testid","document","getElementById"],"mappings":"uOAYaA,EAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KACtB,OACC,6BACC,4BAAKA,EAAKC,OACV,4BAAKD,EAAKE,MACV,yCAAeF,EAAKG,UACpB,qCAAWH,EAAKI,Q,SCXNC,EAAkB,SAACC,GAA0D,IAA7CC,EAA4C,uDAAxB,GAAwB,EAClDC,IAAMC,UAAkB,WAC7D,IACC,IAAMC,EAAOC,aAAaC,QAAQN,GAElC,OAAOI,EAAOG,KAAKC,MAAMJ,GAAQH,EAChC,MAAOQ,GAER,OADAC,QAAQC,IAAIF,GACLR,MAR+E,mBACjFW,EADiF,KACpEC,EADoE,KAYlFC,EAAa,SAACC,GACnB,IACC,IAAMC,EAAeD,aAAiBE,SAAWF,EAAMA,GAASA,EAChEF,EAAeG,GACfX,aAAaa,QAAQlB,EAAKO,KAAKY,UAAUH,IACxC,MAAOP,GACRC,QAAQC,IAAIF,KAId,MAAO,CAACG,EAAaE,ICnBhBM,EAA0B,CAAEC,MAAO,GAAIC,MAAO,GAAIC,UAAU,GCNlEC,IAASC,OAAO,mBDQc,WAA2B,IAAD,EACvB1B,EAAgB,YADO,mBAChD2B,EADgD,KACtCC,EADsC,OAElB5B,EAAgB,QAFE,mBAEhD6B,EAFgD,KAEpCC,EAFoC,OAIR3B,IAAMC,UAAoB,WACxE,IAAK2B,IAAQF,GAAa,CACzB,IAAMG,EAAOxB,KAAKC,MAAMoB,GACxB,OAAO,eACHR,EADJ,CAECM,WACAL,MAAOU,EAAKV,MACZC,MAAOS,EAAKT,QAId,OAAOF,KAf+C,0BAI9CC,EAJ8C,EAI9CA,MAAOC,EAJuC,EAIvCA,MAAOC,EAJgC,EAIhCA,SAAYS,EAJoB,KAkBjDC,EAAS,uCAAG,gCAAAC,EAAA,6DACjBF,EAAS,eAAKZ,EAAN,CAAoBG,UAAU,KADrB,SAEGY,IAAMC,IE/BC,8CF6BV,cAEXf,EAFW,gBAGGc,IAAMC,IEjCC,8CF8BV,OAGXd,EAHW,OAKjBU,EAAS,CAAEX,MAAOA,EAAMU,KAAMT,MAAOe,IAAQf,EAAMS,KAAM,MAAOR,UAAU,IACpEQ,EAAOxB,KAAKY,UAAU,CAAEE,MAAOA,EAAMU,KAAMT,MAAOe,IAAQf,EAAMS,KAAM,QAC5EF,EAAeE,GAPE,4CAAH,qDAUf7B,IAAMoC,WAAU,WACXR,IAAQJ,IACXC,EAAYY,iBAEX,IAEHrC,IAAMoC,WAAU,WACXR,IAAQF,IACXK,MAEC,IAEH,IAAMO,EAAcnB,EAAMoB,KAAI,SAACC,GAC9B,IAAMhD,EAAO,CACZiD,GAAID,EAAEC,GACNhD,MAAO+C,EAAE/C,MACTC,KAAM8C,EAAE9C,KACRC,SAAUyB,EAAMoB,EAAEE,QAAQ/C,SAC1BC,KAAMwB,EAAMoB,EAAEE,QAAQC,QAAQ/C,MAG/B,OAAO,kBAAC,EAAD,CAAeE,IAAKN,EAAKiD,GAAIjD,KAAMA,OAG3C,OAAO6B,EAAW,wBAAIuB,cAAY,WAAhB,cAA4C,oCAAGN,KC5DlD,MAAUO,SAASC,eAAe,U","file":"static/js/main.87fe958e.chunk.js","sourcesContent":["import React from 'react';\n\ninterface PostProps {\n\tpost: {\n\t\tid: number;\n\t\ttitle: string;\n\t\tbody: string;\n\t\tusername: string;\n\t\tcity: string;\n\t}\n}\n\nexport const Post = ({ post }: PostProps) => {\n\treturn (\n\t\t<div>\n\t\t\t<h2>{post.title}</h2>\n\t\t\t<h4>{post.body}</h4>\n\t\t\t<h5>Username: {post.username}</h5>\n\t\t\t<h5>City: {post.city}</h5>\n\t\t</div>\n\t)\n}","import React from 'react';\n\ntype Storage = {\n\tkey: string;\n\tinitialValue: any;\n}\n\nexport const useLocalStorage = (key: string, initialValue: any = ''): [any, Function] => {\n\tconst [storedValue, setStoredValue] = React.useState<Storage>(() => {\n\t\ttry {\n\t\t\tconst item = localStorage.getItem(key);\n\n\t\t\treturn item ? JSON.parse(item) : initialValue;\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\treturn initialValue;\n\t\t}\n\t});\n\n\tconst setStorage = (value: any) => {\n\t\ttry {\n\t\t\tconst valueToStore = value instanceof Function ? value(value) : value;\n\t\t\tsetStoredValue(valueToStore);\n\t\t\tlocalStorage.setItem(key, JSON.stringify(valueToStore))\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t}\n\t};\n\n\treturn [storedValue, setStorage];\n}","import React from 'react';\nimport axios from 'axios';\nimport isEmpty from 'lodash/isEmpty';\nimport mapKeys from 'lodash/mapKeys';\nimport { Post as PostComponent } from './Post'\nimport { usersResource, postsResource } from './constants';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PageState, Post } from './types'\nimport { useLocalStorage } from './useLocalStorage';\n\nconst initialState: PageState = { posts: [], users: {}, fetching: false };\n\nexport const Page: React.FC = (): React.ReactElement => {\n\tconst [clientId, setClientId] = useLocalStorage('clientId');\n\tconst [storedData, setDataToStore] = useLocalStorage('data');\n\n\tconst [{ posts, users, fetching }, setState] = React.useState<PageState>(() => {\n\t\tif (!isEmpty(storedData)) {\n\t\t\tconst data = JSON.parse(storedData);\n\t\t\treturn {\n\t\t\t\t...initialState,\n\t\t\t\tclientId,\n\t\t\t\tposts: data.posts,\n\t\t\t\tusers: data.users,\n\t\t\t}\n\t\t}\n\n\t\treturn initialState;\n\t});\n\n\tconst fetchData = async () => {\n\t\tsetState({ ...initialState, fetching: true });\n\t\tconst posts = await axios.get(postsResource);\n\t\tconst users = await axios.get(usersResource);\n\n\t\tsetState({ posts: posts.data, users: mapKeys(users.data, 'id'), fetching: false });\n\t\tconst data = JSON.stringify({ posts: posts.data, users: mapKeys(users.data, 'id') });\n\t\tsetDataToStore(data);\n\t}\n\n\tReact.useEffect(() => {\n\t\tif (isEmpty(clientId)) {\n\t\t\tsetClientId(uuidv4())\n\t\t}\n\t}, [])\n\n\tReact.useEffect(() => {\n\t\tif (isEmpty(storedData)) {\n\t\t\tfetchData();\n\t\t}\n\t}, []);\n\n\tconst renderPosts = posts.map((p: Post) => {\n\t\tconst post = {\n\t\t\tid: p.id,\n\t\t\ttitle: p.title,\n\t\t\tbody: p.body,\n\t\t\tusername: users[p.userId].username,\n\t\t\tcity: users[p.userId].address.city,\n\t\t}\n\n\t\treturn <PostComponent key={post.id} post={post} />\n\t});\n\n\treturn fetching ? <h2 data-testid=\"loading\">loading...</h2> : <>{renderPosts}</>\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Page } from './Page'\n\nReactDOM.render(<Page />, document.getElementById('root'));\n","export const usersResource = 'https://jsonplaceholder.typicode.com/users';\nexport const postsResource = 'https://jsonplaceholder.typicode.com/posts';\n"],"sourceRoot":""}